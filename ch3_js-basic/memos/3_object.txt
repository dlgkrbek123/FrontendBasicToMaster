---------------------------------------------------------------------

객체(참조형) 타입
- 프리미티브 타입을 제외한 모든 타입
- 프로퍼티명은 number, string, symbol
- 값은 어떤것이든 할당가능

---------------------------------------------------------------------

객체의 생성

1. 생성자 호출
- 객체리터럴보다 번거로워서 유기됨

const obj = new Object();
obj.id = 'id';
obj.name = 'name';


2. 객체 리터럴
- 간결함

const obj = {
  id: "id",
  name: "name"
}


3. 생성자 함수
- 모든 함수는 생성자 함수로 사용가능, new를 사용하여 호출
- 생성자 함수용 함수를 구분하기 위해 대문자로 시작하는게 좋다.
- 화살표 함수는 this바인딩이 되지 않아 생성자 함수로는 사용 불가

function Vehicle(type) {
  this.type = type;
}
const car = new Vehicle('Car');

---------------------------------------------------------------------

프로퍼티는 동적으로 추가 및 갱신 가능

프로퍼티에 접근할때마다 별도의 연산이 필요하거나
변경될때마다 처리가 필요하다면 getter, setter를 쓰면 좋다.

const obj = {
  myName: "javascript",

  get name() {
    return this.myName;
  }
  
  set name(name) {
    if(name !== null) this.myName = name;
  }
}


Object.definedProperty()
- 객체와 심볼을 전달
- 객체의 수정, 삭제, 열거여부등을 제어가능

const obj = { myName: "javascript" };

Object.definedProperty(obj, 'name', {
  get() { return this.myName; }

  set(name) {
    if(name !== null) this.myName = name;
  }
})

---------------------------------------------------------------------

배열: 순서가 있는 데이터의 집합
- 인덱스와 원소
- Array 생성자 / [] 
- 다른 언어와 다르게 배열의 원소들의 타입이 통일하지 않아도 된다
  하지만 통일하는게 정신 건강에 이롭다

shift, pop / unshift, push / sort, splice는 원본 배열을 변경
concat, slice, map, forEach, filter는 원본은 유지


유사 배열 객체
- 일반 객체를 배열처럼 활용가능
- length 프로퍼티로 양의 정수값을 가진 객체
- 배열의 내장 메소드는 사용불가
- arguments 객체가 대표적

const arr = {
  0: "",
  1: "",
  length: 2
}

---------------------------------------------------------------------